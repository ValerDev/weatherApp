{"version":3,"sources":["components/info.js","components/forn.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","Form","props","onSubmit","weatherMetod","type","name","placeholder","Weather","className","city","country","temp","pressure","sunset","error","API_Key","App","state","undefined","gettingWeather","_callee","e","api_url","data","deta","sunset_deta","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","sys","Date","setTime","getHours","getMinutes","getSeconds","_this","setState","main","stop","info","forn","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAOeA,EALF,kBACTC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,yCCOWC,EATF,SAAAC,GAAK,OACdJ,EAAAC,EAAAC,cAAA,QAAMG,SAAUD,EAAME,cAG1BN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,OAAOC,YAAY,wBACvCT,EAAAC,EAAAC,cAAA,oCCWWQ,EAhBC,SAAAN,GAAK,OAEbJ,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACVP,EAAMQ,MAAOZ,EAAAC,EAAAC,cAAA,WACVF,EAAAC,EAAAC,cAAA,sBAAcE,EAAMQ,KAApB,WAAkCR,EAAMS,SACxCb,EAAAC,EAAAC,cAAA,yBAAiBE,EAAMU,KAAvB,MACAd,EAAAC,EAAAC,cAAA,sBAAcE,EAAMW,UACpBf,EAAAC,EAAAC,cAAA,oBAAYE,EAAMY,SAGtBhB,EAAAC,EAAAC,cAAA,KAAGS,UAAU,SAASP,EAAMa,SCPlCC,EAAS,mCA0ECC,6MAvEZC,MAAQ,CACJN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,KAGbC,qDAAiB,SAAAC,EAAOC,GAAP,IAAAZ,EAAAa,EAAAC,EAAAV,EAAAW,EAAAC,EAAA,OAAAC,EAAA5B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACbT,EAAEU,mBACItB,EAAOY,EAAEW,OAAOC,SAASxB,KAAKyB,OAFvB,CAAAN,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAMXK,MAAK,qDAAAC,OAAsD3B,EAAtD,WAAA2B,OAAoErB,EAApE,kBANM,cAKRO,EALQM,EAAAS,KAAAT,EAAAE,KAAA,EAOGR,EAAQgB,OAPX,OAOTf,EAPSK,EAAAS,KAQXxB,EAAUU,EAAKgB,IAAI1B,QACnBW,EAAO,IAAIgB,MACVC,QAAQ5B,GACTY,EAAcD,EAAKkB,WAAa,IAAMlB,EAAKmB,aAAe,IAAMnB,EAAKoB,aACzEC,EAAKC,SAAS,CACVnC,KAAMY,EAAKwB,KAAKpC,KAChBF,KAAMc,EAAKlB,KACXK,QAASa,EAAKgB,IAAI7B,QAClBE,SAAUW,EAAKwB,KAAKnC,SACpBC,OAAQY,EACRX,WAAOI,IAlBIU,EAAAE,KAAA,iBAqBfe,EAAKC,SAAS,CACVnC,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,kCA3BI,yBAAAc,EAAAoB,SAAA5B,oIAgCf,OACIvB,EAAAC,EAAAC,cAAA,OAAKS,UAAU,WACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,QACfX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iBACfX,EAAAC,EAAAC,cAACkD,EAAD,OAEJpD,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iBACXX,EAAAC,EAAAC,cAACmD,EAAD,CAAM/C,aAAgBgD,KAAKhC,iBAC3BtB,EAAAC,EAAAC,cAACqD,EAAD,CACIzC,KAAQwC,KAAKlC,MAAMN,KACnBF,KAAQ0C,KAAKlC,MAAMR,KACnBC,QAAWyC,KAAKlC,MAAMP,QACtBE,SAAYuC,KAAKlC,MAAML,SACvBC,OAAUsC,KAAKlC,MAAMJ,OACrBC,MAASqC,KAAKlC,MAAMH,oBA1D1BuC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e033d623.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Info = () => (\r\n    <div>\r\n    <h2> Weather in your country </h2>\r\n</div>\r\n)\r\nexport default Info;","import React from 'react';\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.weatherMetod}>\r\n\r\n\r\n<input type='text' name='city' placeholder='type your country..' />\r\n    <button> Get the weather</button>\r\n</form>\r\n\r\n)\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n\r\n        <div className='infoWeath'>\r\n            {props.city &&<div>\r\n                <p>Location: {props.city}, code: {props.country}</p>\r\n                <p>Temperature: {props.temp} C</p>\r\n                <p>pressure: {props.pressure}</p>\r\n                <p>Sunset: {props.sunset}</p>\r\n            </div>\r\n            }\r\n            <p className='error'>{props.error}</p>\r\n\r\n        </div>\r\n);\r\n\r\n\r\nexport default Weather;","import React from 'react';\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/forn\";\r\nimport Weather from \"./components/Weather\";\r\n\r\nconst API_Key= '898f42d54c79f17acb998188ce75c057';\r\n\r\nclass App extends React.Component{\r\n    state = {\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        pressure: undefined,\r\n        sunset: undefined,\r\n        error: undefined\r\n\r\n    }\r\n  gettingWeather = async (e) => {\r\n      e.preventDefault();\r\n      const city = e.target.elements.city.value;\r\n\r\nif(city) {\r\n    const  api_url = await\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_Key}&units=metric`)\r\n    const data= await api_url.json()\r\n    var sunset  = data.sys.sunset;\r\n    var deta = new Date ();\r\n    deta.setTime(sunset);\r\n    var sunset_deta = deta.getHours() + ':' + deta.getMinutes() + \":\" + deta.getSeconds();\r\n    this.setState({\r\n        temp: data.main.temp,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        pressure: data.main.pressure,\r\n        sunset: sunset_deta,\r\n        error: undefined\r\n    });\r\n}else{\r\n    this.setState({\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        pressure: undefined,\r\n        sunset: undefined,\r\n        error: \"Please write a country name..\"\r\n    })\r\n}\r\n}\r\n  render() {\r\n    return(\r\n        <div className='wrapper'>\r\n            <div className=\"main\">\r\n            <div className=\"container\">\r\n                <div className='row'>\r\n                    <div className=\"col-sm-5 info\">\r\n                    <Info/>\r\n                </div>\r\n                <div className=\"col-sm-7 form\">\r\n                    <Form weatherMetod = {this.gettingWeather}/>\r\n                    <Weather\r\n                        temp = {this.state.temp}\r\n                        city = {this.state.city}\r\n                        country = {this.state.country}\r\n                        pressure = {this.state.pressure}\r\n                        sunset = {this.state.sunset}\r\n                        error = {this.state.error}\r\n\r\n                    />\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n  }\r\n};\r\n\r\nexport  default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}